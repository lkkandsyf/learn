"把vim ZZ 转换为 W --> ZZ 保存并退出 in  normal mode
map W ZZ
"把ZQ 映射为q --->ZQ 不保存并退出 in normal mode
map q ZQ
"map nerdtree dir in  the vim command
map <C-b> :NERDTree<CR>
"set quickfix shortcut :cn:cp
"nmap
"search donw
"map <space> /
"search up
""map <c-space> ?
""""""""""""""""""""""""""""""
" Vunble
""""""""""""""""""""""""""""""
set nocompatible
filetype off " required!
set rtp+=~/.vim/bundle/vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'gmarik/vundle.vim'
"

" original repos on GitHub
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-repeat'
Plugin 'godlygeek/csapprox'
Plugin 'wincent/command-t'
Plugin 'ajh17/Spacegray.vim'
Plugin 'tpope/vim-surround'
Plugin 'taglist.vim'
Plugin 'grep.vim'
Plugin 'myusuf3/numbers.vim'

"Plugin 'Lokaltog/powerline'
Plugin 'kien/ctrlp.vim'
"plugin  'ludovicchabant/vim-lawrencium'
"Plugin 'bling/vim-airline'
Plugin 'scrooloose/syntastic'
"Plugin  'majutsushi/tabar'
"Plugin  'plasticboy/vim-markdown'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'jiangmiao/auto-pairs'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'python.vim'
Plugin 'python_match.vim'
Plugin 'tomtom/tcomment_vim'
"Plugin 'tomtom/tlib_vim'
Plugin 'Valloric/python-indent'
Plugin 'Valloric/vim-valloric-colorscheme'
Plugin 'nanotech/jellybeans.vim'
""Plugin 'Yggdroot/indentLine'
Plugin 'morhetz/gruvbox'
Plugin 'hhff/SpacegrayEighties.vim'
Plugin 'a.vim'
"Plugin 'c.vim'
""vim-scripts repos
Plugin 'L9', {'name': 'newL9'}
Plugin 'FuzzyFinder'
Plugin 'Solarized'
Plugin 'molokai'
"Plugin 'scrooloose/nerdcommerter'
Plugin 'scrooloose/nerdtree'
" vim-scripts repos
Plugin 'Valloric/YouCompleteMe'
call vundle#end()

filetype plugin indent on "required
" filetype plugin on

"needs  Plugin
"Plugin 'edsono/vim-matchit'
"Plugin 'justinmk/vim-sneak'
"Plugin 'mhizn/vim-signify'
"Plugin 'plasticboy/vim-markdown'
"Plugin 'scrooloose/nerdcommerter'
"Plugin 'sjl/gundo.vim'

"color schemes
"Plugin 'tomasr/molokai'
"Plugin 'flazz/vim-colorschemes'

"Plugin 'tyru/open-browser.vim'
set nu
"set shortmess+=c
" set background=light
syntax on
set t_Co=256
set tabstop=4
set smarttab
" set smartcase
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
" set guifont=FantasqueSansMono\ 12
set autoindent
set cindent
set incsearch
" set ignorecase
" set noet
" set sw=4

" set term when running in the terminal
"if has("gui_gtk2")
"elseif
"   set term=xterm-256color
"end

" quit
command! -bang Q q<bang>

"enable powerline
let g:Powerline_symbols = 'fancy'
" colo desert
"colo valloric
" colo molokai
" colo solarized
colo jellybeans
"colo gruvbox
set background=dark

let g:ycm_confirm_extra_conf=0
let g:ycm_autoclose_preview_window_after_insertion=1
set completeopt-=preview

"ycm
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_extra_conf_globalist = ['~/Learning']

" let g:ycm_extra_conf_globalist = ['~/Learning', '~/*']

"backspace
set backspace=indent,eol,start

"indentLine
"let g:indentLine_char = '|'
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
"如果打开不高亮 export CSCOPE_EDITOR=vim or open ~/.bashrc 添加
	if filereadable("cscope.out")
		cs add cscope.out
	endif
endif

" highlight tweak
hi spellbad ctermbg=16 ctermfg=166
hi Comment ctermfg=245 guifg=#BCBCBC

" disable auto add comment mark
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" fake emacs keymap
"imap <C-a> <Home>
"imap <C-e> <End>
"imap <C-f> <Right>
"imap <C-b> <Left>
"imap <C-k> <Esc>d$<C-c>A
"imap <C-d> <delete>
"imap <C-n> <Down>
"imap <C-p> <Up>

" steal configs

" nnoremap ; :
" nnoremap : ;
" vnoremap ; :
" vnoremap : ;


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           reset vimrc augroup                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" We reset the vimrc augroup. Autocommands are added to this group throughout
" the file
augroup vimrc
  autocmd!
augroup END

set scrolloff=2         " 2 lines above/below cursor when scrolling
set showmatch           " show matching bracket (briefly jump)
" set matchtime=2         " reduces matching paren blink time from the 5[00]ms def
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar"
" set undofile            " stores undo state even when files are closed (in undodir)
set cursorline          " highlights the current line
set winaltkeys=no       " turns of the Alt key bindings to the gui menu


" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu            " completion with menu
" This changes the default display of tab and CR chars in list mode
set listchars=tab:▸\ ,eol:¬

" The "longest" option makes completion insert the longest prefix of all
" the possible matches; see :h completeopt
set completeopt=menu,menuone,longest
set switchbuf=useopen,usetab"

" EDITOR SETTINGS
set ignorecase
set smartcase
set autoindent
set copyindent
set cindent
set cino=b1,g0,N-s,t0,(0,W4  " see :h cinoptions-values
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set bs=indent,eol,start " Allow backspacing over everything in insert mode
set nobackup            " no backup~ files.

set tabstop=4           " number of spaces a tab counts for
set shiftwidth=4        " spaces for autoindents
set softtabstop=4
set shiftround          " makes indenting a multiple of shiftwidth
set expandtab           " turn a tab into spaces
"set noshowmode          " don't show the mode ("-- INSERT --") at the bottom

" misc settings
set fileformat=unix     " file mode is unix
set fileformats=unix,dos,mac   " detects unix, dos, mac file formats in that order

set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo
                        " file -- 20 jump links, regs up to 500 lines'

set hidden              " allows making buffers hidden even with unsaved changes
set history=1000        " remember more commands and search history
set undolevels=1000     " use many levels of undo
set autoread            " auto read when a file is changed from the outside
set mouse=a             " enables the mouse in all modes
set foldlevelstart=99   " all folds open by default

" toggles vim's paste mode; when we want to paste something into vim from a
" different application, turning on paste mode prevents the insertion of extra
" whitespace
set pastetoggle=<F7>

" Right-click on selection should bring up a menu
set mousemodel=popup_setpos

" With this, the gui (gvim and macvim) now doesn't have the toolbar, the left
" and right scrollbars and the menu.
set guioptions-=T
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=m
set guioptions-=M

" this makes sure that shell scripts are highlighted
" as bash scripts and not sh scripts
let g:is_posix = 1

" tries to avoid those annoying "hit enter to continue" messages
" if it still doesn't help with certain commands, add a second <cr>
" at the end of the map command
set shortmess+=a

" Look for tag def in a "tags" file in the dir of the current file, then for
" that same file in every folder above the folder of the current file, until the
" root.
set tags=./tags;/

" turns off all error bells, visual or otherwise
set noerrorbells visualbell t_vb=
autocmd vimrc GUIEnter * set visualbell t_vb=

" none of these should be word dividers, so make them not be
set iskeyword+=_,$,@,%,#,-

" allow backspace and cursor keys to cross line boundaries
set whichwrap+=<,>,h,l
set nohlsearch          " do not highlight searched-for phrases
set incsearch           " ...but do highlight-as-I-type the search string
set gdefault            " this makes search/replace global by default

" enforces a specified line-length and auto inserts hard line breaks when we
" reach the limit; in Normal mode, you can reformat the current paragraph with
" gqap.
set textwidth=80

" this makes the color after the textwidth column highlighted
" set colorcolumn=+1

" options for formatting text; see :h formatoptions
set formatoptions=tcroqnj

if v:version >= 704
  " The new Vim regex engine is currently slooooow as hell which makes syntax
  " highlighting slow, which introduces typing latency.
  " Consider removing this in the future when the new regex engine becomes
  " faster.
  set regexpengine=1
endif

" The alt (option) key on macs now behaves like the 'meta' key. This means we
" can now use <m-x> or similar as maps. This is buffer local, and it can easily
" be turned off when necessary (for instance, when we want to input special
" characters) with :set nomacmeta.
if has("gui_macvim")
  set macmeta
endif

"if has('unnamedplus')
  " By default, Vim will not use the system clipboard when yanking/pasting to
  " the default register. This option makes Vim use the system default
  " clipboard.
  " Note that on X11, there are _two_ system clipboards: the "standard" one, and
  " the selection/mouse-middle-click one. Vim sees the standard one as register
  " '+' (and this option makes Vim use it by default) and the selection one as
  " '*'.
  " See :h 'clipboard' for details.
  " set clipboard=unnamedplus,unnamed
" else
  " Vim now also uses the selection system clipboard for default yank/paste.
  "set clipboard+=unnamed
" endif

" UltiSnips is missing a setf trigger for snippets on BufEnter
autocmd vimrc BufEnter *.snippets setf snippets

" In UltiSnips snippet files, we want actual tabs instead of spaces for indents.
" US will use those tabs and convert them to spaces if expandtab is set when the
" user wants to insert the snippet.
autocmd vimrc FileType snippets set noexpandtab

" The stupid python filetype plugin overrides our settings!
autocmd vimrc FileType python
      \ set tabstop=4 |
      \ set shiftwidth=4 |
      \ set softtabstop=4 |
      " \ nnoremap ; :|
      " \ nnoremap : ;|
      " \ vnoremap ; :|
      " \ vnoremap : ;|
      " \ inoremap ; :|
      " \ inoremap : ;

" The stupid rust filetype plugin overrides our settings!
autocmd vimrc FileType rust
      \ set tabstop=4 |
      \ set shiftwidth=4 |
      \ set softtabstop=4 |
      \ set textwidth=80

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           More involved tweaks                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Unicode support (taken from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

augroup vimrc
  " Automatically delete trailing DOS-returns and whitespace on file open and
  " write.
  autocmd BufRead,BufWritePre,FileWritePre * silent! %s/[\r \t]\+$//
augroup END


" Sets a font for the GUI
if has("gui_gtk2")
  set guifont=Source\ Code\ Pro\ For\ Powerline\ Medium\ 12
elseif has("gui_macvim")
  " My Mac has a fairly high DPI so the font needs to be bigger
  set guifont=Consolas\ For\ Powerline:h14
elseif has("gui_win32")
  set guifont=Consolas\ For\ Powerline:h11
end

" Sometimes, $MYVIMRC does not get set even though the vimrc is sourced
" properly. So far, I've only seen this on Linux machines on rare occasions.
if has("unix") && strlen($MYVIMRC) < 1
  let $MYVIMRC=$HOME . '/.vimrc'
endif

" Highlight Class and Function names
function! s:HighlightFunctionsAndClasses()
  syn match cCustomFunc      "\w\+\s*\((\)\@="
  syn match cCustomClass     "\w\+\s*\(::\)\@="

  hi def link cCustomFunc      Function
  hi def link cCustomClass     Function
endfunction

" Highlight Class and Function names, D specific
function! s:HighlightDFunctionsAndClasses()
  syn match cCustomDFunc     "\w\+\s*\(!.\{-}(\)\@="
  syn match cCustomDFuncUFCS ".\w\+\s*\(!.\{-}\)\@="

  hi def link cCustomDFunc     Function
  hi def link cCustomDFuncUFCS Function
endfunction

" TODO: this should:
" a) not be called for every filetype
" b) be in a separate plugin
au vimrc Syntax * call s:HighlightFunctionsAndClasses()
au vimrc Syntax d call s:HighlightDFunctionsAndClasses()

" TODO: split this into separate plugin
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        execute "Ack " . l:pattern . ' %'
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

"Basically you press * or # to search for the current selection
" * is next search
" # is up search
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>
vnoremap <silent> gv :call VisualSearch('gv')<CR>

" cindent is a bit too smart for its own good and triggers in text files when
" you're typing inside parens and then hit enter; it aligns the text with the
" opening paren and we do NOT want this in text files!
autocmd vimrc FileType text,markdown,gitcommit set nocindent

autocmd vimrc FileType markdown setlocal spell! spelllang=en_us

au vimrc BufReadCmd *.epub call zip#Browse( expand( "<amatch>" ) )

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                            custom mappings                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NOTE: a lot of these mappings won't make sense until you realize I'm using a
" "Dvorak-Qwerty Command" layout (and similar on Win/Lin). The layout is Dvorak
" unless you hold down Ctrl or Alt or Cmd; then it changes to Qwerty. This type
" of layout gives us Dvorak typing but Qwerty keyboard shortcuts.

" our <leader> will be the space key
let mapleader=" "

" our <localleader> will be the '-' key
let maplocalleader="-"

" this makes vim's regex engine "not stupid"
" see :h magic
nnoremap / /\v
vnoremap / /\v

" With this map, we can select some text in visual mode and by invoking the map,
" have the selection automatically filled in as the search text and the cursor
" placed in the position for typing the replacement text. Also, this will ask
" for confirmation before it replaces any instance of the search text in the
" file.
" NOTE: We're using %S here instead of %s; the capital S version comes from the
" eregex.vim plugin and uses Perl-style regular expressions.
vnoremap <C-r> "hy:%S/<C-r>h//c<left><left>

" Fast saving
nnoremap <leader>w :w!<cr>

" <leader>v brings up .vimrc
" <leader>V reloads it and makes all changes active (file has to be saved first)
noremap <leader>v :e! $MYVIMRC<CR>
noremap <silent> <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" with this, we can now type ",." to exit out of insert mode
" if we really wanted to type ",.", then just type one char, wait half a sec,
" type another
"inoremap ,. <Esc>
"vnoremap ,. <Esc>

" CTRL-U and CTRL-W in insert mode cannot be undone.  Use CTRL-G u to first
" break undo, so that we can undo those changes after inserting a line break.
" For more info, see: http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" This command will allow us to save a file we don't have permission to save
" *after* we have already opened it. Super useful.
cnoremap w!! w !sudo tee % >/dev/null

" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
" nnoremap ' `
" nnoremap ` '

" g<c-]> is jump to tag if there's only one matching tag, but show list of
" options when there is more than one definition
nnoremap <leader>g g<c-]>
"this need to ruby
"nnoremap <leader>t <c-t>

" These create newlines like o and O but stay in normal mode
nnoremap <silent> zj o<Esc>k
nnoremap <silent> zk O<Esc>j

" Now we don't have to move our fingers so far when we want to scroll through
" the command history; also, don't forget the q: command (see :h q: for more
" info)
cnoremap <c-j> <down>
cnoremap <c-k> <up>

" Keep search matches in the middle of the window.
" zz centers the screen on the cursor, zv unfolds any fold if the cursor
" suddenly appears inside a fold.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" Also center the screen when jumping through the changelist
nnoremap g; g;zz
nnoremap g, g,zz

" In normal mode, we use : much more often than ; so lets swap them.
" WARNING: this will cause any "ordinary" map command without the "nore" prefix
" that uses ":" to fail. For instance, "map <f2> :w" would fail, since vim will
" read ":w" as ";w" because of the below remappings. Use "noremap"s in such
" situations and you'll be fine.
" nnoremap ; :
" nnoremap : ;
" vnoremap ; :
" vnoremap : ;

" This makes j and k work on "screen lines" instead of on "file lines"; now, when
" we have a long line that wraps to multiple screen lines, j and k behave as we
" expect them to.
nnoremap j gj
nnoremap k gk

" Use Q for formatting the current paragraph (or visual selection)
vnoremap Q gq
nnoremap Q gqap

" This is quit all
noremap <Leader>q :qa<cr>

" key bindings for quickly moving between windows
" h left, l right, k up, j down
noremap <leader>h <c-w>h
noremap <leader>l <c-w>l
noremap <leader>k <c-w>k
noremap <leader>j <c-w>j

" for faster scrolling
" TODO: create a command for scrolling by ~70% of the window height
"noremap <m-j> 15gj
"noremap <m-k> 15gk

" on macs the alt key is inconvenient to press, so let's also map to ctrl
noremap <c-j> 15gj
noremap <c-k> 15gk

" Switches to the previous buffer that was shown in the current window, but also
" closes the current buffer before switching to the previous one
noremap <leader>bq <c-^> :bd #<cr>

" Switch to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>

" Toggle and untoggle spell checking
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>

" spelling shortcuts using <leader>
" ]s next misspelled word
" [s previous misspelled word
" zg add to dict
" z= get suggestions
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>su z=

" Using '<' and '>' in visual mode to shift code by a tab-width left/right by
" default exits visual mode. With this mapping we remain in visual mode after
" such an operation.
vnoremap < <gv
vnoremap > >gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Command-T                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:CommandTMaxHeight = 30
let g:CommandTMatchWindowReverse = 1 " shows results in reverse order
let g:CommandTFileScanner = 'find'
let g:CommandTTraverseSCM = 'pwd'

set wildignore+=*.o,*.obj,.git,*.pyc,*.so,blaze*,READONLY,llvm,Library*
set wildignore+=CMakeFiles,packages/*,**/packages/*,**/node_modules/*

" This appears to be necessary; command-t doesn't appear to be falling back to
" wildignore on its own.
let g:CommandTWildIgnore=&wildignore

" MacVim doesn't use tab focus to switch from command-t input field to the file
" list, so using j and k for next and prev screws everything up. But it does
" work on linux so let's use it there.
if has("gui_gtk2")
    let g:CommandTSelectNextMap = [ '<down>' ]
    let g:CommandTSelectPrevMap = [ '<up>' ]
endif

nnoremap <leader>t :CommandT<cr>
nnoremap <leader>n :CommandTBuffer<cr>
nnoremap <leader>' :CommandTFlush<cr>

let g:CommandTCancelMap = ['<ESC>', '<C-c>']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                UltiSnips                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" we can't use <tab> as our snippet key since we use that with YouCompleteMe
let g:UltiSnipsSnippetsDir         = $HOME.'/.vim/bundle/vim-snippets/UltiSnips'
if has("gui_macvim")
  " Ctrl conflicts with "Dvorak-Qwerty Command"
   let g:UltiSnipsExpandTrigger       = "<m-s>"
else
  " Alt conflicts with Xmonad
   let g:UltiSnipsExpandTrigger       = "<c-s>"
endif
"let g:UltiSnipsExpandTrigger       = "<c-s>"
"complete for loop  --  class
let g:UltiSnipsExpandTrigger       = "<c-j>"
let g:UltiSnipsListSnippets        = "<c-m-s>"
let g:UltiSnipsJumpForwardTrigger  = "<c-f>"
let g:UltiSnipsJumpBackwardTrigger = "<c-b>"
let g:snips_author                 = 'Strahinja Val Markovic'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               easymotion                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:EasyMotion_leader_key = '<Leader>e'

" Provides the equivalent of <Leader>s, which is forwards/backwards search for a
" character.
" has to be 'nmap', 'noremap' doesn't work
nmap s <Plug>(easymotion-s)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              fuzzyfinder                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" This turns on the mrufile and mrucmd modes
let g:fuf_modesDisable    = []
let g:fuf_mrufile_maxItem = 1000
let g:fuf_mrucmd_maxItem  = 400
let g:fuf_file_exclude    = '\v\~$|\.(o|exe|dll|bak|class|meta|lock|orig|jar|swp)$|/test/data\.|(^|[/\\])\.(hg|git|bzr)($|[/\\])'

nnoremap <Leader>fm :FufMruFile<CR>
nnoremap <Leader>fc :FufMruCmd<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                vim-git                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn on spell checking by default for git commit messages
au vimrc FileType gitcommit setlocal spell! spelllang=en_us

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                syntastic                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:syntastic_error_symbol = 'x'
let g:syntastic_warning_symbol = '!'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--select=F,C9 --max-complexity=10'

let g:syntastic_mode_map = {
       \ "mode": "active",
       \ "active_filetypes": [],
       \ "passive_filetypes": ["dart", "html"] }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              YouCompleteMe                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_collect_identifiers_from_tags_files = 1			 "开启基于tag的补全可以在这添path
let g:ycm_complete_in_comments = 1                           "comment also complete
let g:ycm_complete_in_sting = 1                              "chars aslo complete
let g:ycm_collect_identifiers_from_comment_and_string = 0    "comment and chars word also complete
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_extra_conf_globlist = ['~/Learning/*']
let g:ycm_filetype_specific_completion_to_disable = {'javascript': 1}
let g:ycm_seed_identifiers_with_syntax = 1                  "syntax keyword complete
let g:ycm_confirm_extra_conf = 0
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
"let g:ycm_key_list_previous_completion =  ['<c-p>']
let g:ycm_key_list_previous_completion =  ['<Up>']
let g:ycm_min_num_of_chars_for_complettion =  2				""输入第二个字符开始补全

""""""""""""YCM""""""""""""""""""""
filetype plugin indent on
"leader is  space
nnoremap <leader>y :YcmForceCompileAndDiagnostics<cr>
nnoremap <leader>pg :YcmCompleter GoTo<CR>
nnoremap <leader>pd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>pc :YcmCompleter GoToDeclaration<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Airline                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:airline_powerline_fonts = 0
let g:airline_theme = 'jellybeans'



"this my vimrc
"colo evening
"auto smart indent
set smartindent
set noexpandtab
"cmd height
set cmdheight=3
"set viminfo+=!
""""""""""""""""""""""cscope设置""""""""""""""""""
set cscopequickfix=s-,c-,d-,i-,t-,e-
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif

"cs find c|d|e|f|g|i|s|t name
"0 或 s 查找本 C 符号(可以跳过注释)
"1 或 g 查找本定义
"2 或 d 查找本函数调用的函数
"3 或 c 查找调用本函数的函数
"4 或 t 查找本字符串
"6 或 e 查找本 egrep 模式
"7 或 f 查找本文件
"8 或 i 查找包含本文件的文件
"nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
"nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
"nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
"nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
"nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
"nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
"nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>


nmap cs f s :cs find s =expand("")
nmap cs f g :cs find g =expand("")
nmap cs f c :cs find c =expand("")
nmap cs f t :cs find t =expand("")
nmap cs f e :cs find e =expand("")
nmap cs f f :cs find f =expand("")
nmap cs f i :cs find i ^=expand("")$
nmap cs f d :cs find d =expand("")


let g:winManagerWindowLayout='FileExplorer|Taglist'
nmap wm :WMToggle<CR>



filetype plugin indent on

"""""""""""""""""Taglist设置"""""""""""""""""
""let Tlist_Auto_Open = 1
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Exit_OnlyWindow = 1
" 按F3按钮，在窗口的左侧出现taglist的窗口,像vc的左侧的workpace
nnoremap <silent> <F3> :TlistToggle<CR><CR>
" :Tlist              调用TagList
let Tlist_Show_One_File=1	 "显示多个文件的tags
"let Tlist_Exit_OnlyWindow=1 "如果Taglist窗口是最后一个窗口则退出Vim
"let Tlist_Use_Right_Window=1 " 在右侧窗口中显示
let Tlist_File_Fold_Auto_Close=1             " 自动折叠
"quick key
map <silent> <leader>nn :TlistToogle<cr>


"ctags
set tags=tags;
set autochdir

"               my    vimrc
"
"nnoremap <cr>G
"nnoremap <leader>gg
"open current file

"show tab space
set list listchars=tab:→\ ,trail:·


nnoremap <leader>o :CtrlP<CR>
nmap <leader><Leader> v
"set highlightsearch
set hls
"设置自动缩进
set ai
"cursor location last modify place"
if has ("autocmd")
        au BufReadPost * if line("'\"")>1|if line("'\"")<=line("$") | exe ("norm'\"") |else |exe "norm $"|endif|endif
endif

"show status in the window bottom
set statusline=%F%m%r%w%h[Format=%{&ff}][Type=%Y]%{strftime(\"%d/%m/%y---%H:%M\")}%=[Line:%l,Column:%c][%p%%]
set laststatus=2

"set paste                  "这里的设置会tab补全产生conflict 以至于tab 失效"
"" no swap
set noswapfile
set wrap
set nocp
"整词换行
set linebreak
"光标快速跳动
set whichwrap=b,s,<,>,[,]




"auto comment perl file
autocmd BufNewfile *.pl exec ":call SetPerlTitle()"
func SetPerlTitle()
        call setline(1,"\#################################")
        call append(line("."),"\#     File name   :".expand("%"))
        call append(line(".")+1,"\#     Author      :kangkangliang")
        call append(line(".")+2,"\#     File desc   :")
        call append(line(".")+3,"\#     Mail        :liangkangkang@paag.com")
        call append(line(".")+4,"\#     Create time :".strftime("%Y-%m-%d",localtime()))
        call append(line(".")+5,"\#################################")
        call append(line(".")+6,"#!/usr/bin/perl ")
        call append(line(".")+7,"use strict;")
        call append(line(".")+8,"use warnings;")
        call append(line(".")+9,"")
endfunc

"auto comment python file
autocmd BufNewfile *.py exec ":call SetPythonTitle()"
func SetPythonTitle()
        call setline(1,"\#################################")
        call append(line("."),"\#-*- coding: utf-8 -*-"          )
        call append(line(".")+1,"\#     File name   :".expand("%"))
        call append(line(".")+2,"\#     Author      :kangkangliang")
        call append(line(".")+3,"\#     File desc   :")
        call append(line(".")+4,"\#     Mail        :liangkangkang@paag.com")
        call append(line(".")+5,"\#     Create time :".strftime("%Y-%m-%d",localtime()))
        call append(line(".")+6,"\#################################")
        call append(line(".")+7,"#!/usr/bin/env python ")
        call append(line(".")+8,"import os")
        call append(line(".")+9,"import numpy as np")
        call append(line(".")+10,"import matplotlib.pyplot as plt")
        call append(line(".")+11,"import sys")
        call append(line(".")+12,"")
endfunc


autocmd BufNewfile *.sh,*.[ch],*.cpp exec ":call SetTitle()"
func SetTitle()
        if &filetype == 'sh'
                call setline(1,"\#########################################")
                call append(line("."),"\#         File name   :".expand("%"))
                call append(line(".")+1,"\#         Author      :kangkangliang")
                call append(line(".")+2,"\#         File desc   :")
                call append(line(".")+3,"\#         Mail        :liangkangkang@paag.com")
                call append(line(".")+4,"\#         Create time :".strftime("%Y-%m-%d",localtime()))
                call append(line(".")+5,"\#########################################")
                call append(line(".")+6,"\#!/usr/bin/bash")
                call append(line(".")+7,"")
        else
                call setline(1,"/*")
                call append(line("."),"\ *            File name               :".expand("%"))
                call append(line(".")+1,"\ *            Author                  :kangkangliang")
                call append(line(".")+2,"\ *            File desc               :")
                call append(line(".")+3,"\ *            Mail                    :liangkangkang@paag.com")
                call append(line(".")+4,"\ *            Create time             :".strftime("%Y-%m-%d",localtime()))
                call append(line(".")+5,"\ */")
        endif
        if &filetype == 'cpp'
				call append(line(".")+6,"")
                call append(line(".")+7,"/*!")
                call append(line(".")+8," *                                             headfile")
                call append(line(".")+9," */")
                call append(line(".")+10,"#include <iostream>")
                call append(line(".")+11,"#include <fstream>")
                call append(line(".")+12,"#include <vector>")
                call append(line(".")+13,"#include <string>")
                call append(line(".")+14,"")
                call append(line(".")+15,"#include <iterator>")
                call append(line(".")+16,"")
                call append(line(".")+17,"")
                call append(line(".")+18,"")
                call append(line(".")+19,"#include <opencv2/core/core.hpp>")
                call append(line(".")+20,"")
                call append(line(".")+21,"")
                call append(line(".")+22,"")
                call append(line(".")+23,"")
                call append(line(".")+24,"#include <opencv2/cudaimgproc.hpp> ")
                call append(line(".")+25,"#include <opencv2/highgui/highgui.hpp>")
                call append(line(".")+26,"using namespace std;")
                call append(line(".")+27,"using namespace cv;")
                call append(line(".")+28,"using namespace cv::cuda;")
                call append(line(".")+29,"/*!")
                call append(line(".")+30," *                                            main function")
                call append(line(".")+31," */")
                call append(line(".")+32,"int")
                call append(line(".")+33,"main(int argc,char **argv)")
                call append(line(".")+34,"{")
                call append(line(".")+35,"")
                call append(line(".")+36,"    return 0;")
                call append(line(".")+37,"}")
        endif
        if &filetype == 'c'
                call append(line(".")+6,"")
                call append(line(".")+7,"/*!")
                call append(line(".")+8," *                     headfile")
                call append(line(".")+9," */")
                call append(line(".")+10,"#include <stdio.h>")
                call append(line(".")+11,"#include <stdlib.h>")
                call append(line(".")+12,"")
                call append(line(".")+13,"/*!")
                call append(line(".")+14," *                    main function")
                call append(line(".")+15," */")
                call append(line(".")+16,"int")
                call append(line(".")+17,"main(int argc,char **argv)")
                call append(line(".")+18,"{")
                call append(line(".")+19,"")
                call append(line(".")+20,"    return 0;")
                call append(line(".")+21,"}")
        endif
endfun
